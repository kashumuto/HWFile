Все исключения делятся на 2 вида — проверяемые (checked) и непроверяемые (unchecked).
Все проверяемые исключения происходят от класса Exception.
Второй вид исключений — “непроверяемые”. 
Они происходят от класса RuntimeException
Чем же они отличаются от проверяемых? Казалось бы, тоже есть куча разных классов, которые происходят от RuntimeException и 
описывают конкретные runtime-исключения. 
Разница в том, что этих ошибок компилятор не ожидает.  
Он как бы говорит: “На момент написания кода я ничего подозрительного не обнаружил, но при его работе что-то пошло не так. Видимо, в коде есть ошибки!” 
И это действительно так. Непроверяемые исключения чаще всего являются следствием ошибок программиста. 
Ты уже сталкивался с несколькими непроверяемыми исключениями: 
ArithmeticException возникает при делении на ноль
ArrayIndexOutOfBoundsException возникает при попытке обратиться к ячейке за пределами массива.
Теоретически, конечно, создатели Java могли бы ввести обязательную обработку таких исключений, но во что бы тогда превратился код? 
При любой операции деления чисел пришлось бы писать try-catch для проверки — не на ноль ли ты случайно делишь? 
При любом обращении к массиву надо было бы писать try-catch чтобы проверить, не вышел ли ты за эти пределы.
Поэтому непроверяемые исключения не нужно обрабатывать в блоках try-catch или пробрасывать наверх, хотя технически это возможно, как и с Error.